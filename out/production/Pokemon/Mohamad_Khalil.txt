At the start of the assignment there were only 4 types which didn't seem like a
lot of things to deal with in the battling aspect so what i did was use a simple
switch statement combined with if statements inside to handle how the damage
multiplier will be calculated, but then after the design change i quickly
realised that i would need another way to handle a changing amount of types that
would make adding additional types in the future easier and will make the code
cleaner to read and maintain, so i started thinking of ways to achieve this, my
first attempt was to keep track of the effective and ineffective types of each
type in the pokemon type enum, but then the enum got too smart for what its
supposed to do, so i moved that part of the code to its own class which handles
everything that has to do with effectiveness and ineffectiveness, and in that
class i experimented with lots of java collections searching for the best one
for the job, i eventually settled with enum sets and enum maps, which are a very
efficient type of collection which was best because i was mostly dealing with
the same piece of data in many of the elements, so it was nice to have the
optimisation for that sort of functionality, the way it works is, when the
pokemon asks for the type data, the type data class checks if the static final
enum map that it has is empty and if it is it loads the types, and after that we
can fetch the needed typedata from the set, this makes our job as developers
incredibly easy as we can add new types seamlessly and let the program structure
handle it. The program went from having to add many if statements to handle
attacks to just adding an enum to a map.